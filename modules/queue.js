// üìÅ js/modules/queue.js
// Tr√¨nh m√¥ ph·ªèng c·∫•u tr√∫c Queue c√†i ƒë·∫∑t tr√™n m·∫£ng
export class QueueSimulator {
    constructor() {
        this.array = [];
        this.capacity = 0;
        this.front = 0;
        this.rear = -1;
        this.size = 0;

        this.boxWidth = 80;  // Chi·ªÅu r·ªông √¥ (ph·∫ßn t·ª≠)
        this.boxHeight = 40; // Chi·ªÅu cao √¥ (ph·∫ßn t·ª≠)
        this.gap = 10;       // Kho·∫£ng c√°ch c√°c √¥

        // Khai b√°o s·∫µn ƒë·ªÉ d√πng chung
        // ƒê·ªãnh v·ªã khu v·ª±c m√¥ ph·ªèng
        this.canvas = document.getElementById("simulation-canvas");
        // ƒê·∫∑t "ng·ªØ c·∫£nh v·∫Ω" (drawing context) tr√™n canvas l√† 2D
        this.ctx = this.canvas.getContext("2d");
    }

    // Kh·ªüi t·∫°o Queue v·ªõi size ph·∫ßn t·ª≠
    init(size) {
        this.capacity = size;
        this.front = 0;
        this.rear = -1;
        this.size = 0;
        this.array = new Array(size).fill(null);
        this.draw(this.ctx);
    }

    // Th√™m value v√†o ph√≠a sau Queue
    enqueue(value) {
        if (this.isFull()) return null;
        this.rear = (this.rear + 1) % this.capacity;
        this.array[this.rear] = value;
        this.size++;
        this.draw(this.ctx);
        return 1;
    }

    // X√≥a ph·∫ßn t·ª≠ ph√≠ tr∆∞·ªõc Queue
    dequeue() {
        if (this.isEmpty()) return null;
        // Kh√¥ng x√≥a gi√° tr·ªã kh·ªèi m·∫£ng, ch·ªâ thay ƒë·ªïi con tr·ªè front
        let value = this.array[this.front];
        this.front = (this.front + 1) % this.capacity;
        this.size--;
        this.draw(this.ctx);
        return value;
    }

    // Xem gi√° tr·ªã ph·∫ßn t·ª≠ ph√≠a tr∆∞·ªõc Queue
    peek() {
        return this.isEmpty() ? null : this.array[this.front];
    }

    // Ki·ªÉm tra r·ªóng
    isEmpty() {
        return this.size === 0;
    }

    // Ki·ªÉm tra ƒë·∫ßy
    isFull() {
        return this.size === this.capacity;
    }

    // ƒê·∫∑t c√°c th√†nh ph·∫ßn v·ªÅ gi√° tr·ªã kh·ªüi ƒë·ªông
    clear() {
        this.front = 0;
        this.rear = -1;
        this.size = 0;
        this.draw(this.ctx);
    }

    // V·∫Ω Queue tr√™n v√πng m√¥ ph·ªèng
    draw(ctx) {
        // ƒê·∫∑t k√≠ch th∆∞·ªõc v√πng m√¥ ph·ªèng v·ªÅ k√≠ch th∆∞·ªõc ch√≠nh x√°c ƒë·ªÉ tr√°nh co gi√£n
        this.canvas.width = this.canvas.clientWidth;
        this.canvas.height = this.canvas.clientHeight;
        //const ctx = this.ctx;
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
        //const baseX = this.canvas.width / 2;
        const startX = 100;
        const startY = this.canvas.height/2 - this.boxHeight/2;
        const baseAddress = 1000; // ƒê·ªãa ch·ªâ gi·∫£ l·∫≠p c∆° s·ªü

        ctx.font = "20px Arial";
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";

        // V·∫Ω √¥ v·ªã tr√≠ -1 (gi·∫£ l·∫≠p)
        const negX = startX - (this.boxWidth + this.gap);
        ctx.fillText("-1", negX + this.boxWidth / 2, startY + this.boxHeight + 18);

        // V·∫Ω c√°c √¥ ph·∫ßn t·ª≠
        for (let i = 0; i < this.capacity; i++) {
            const x = startX + i * (this.boxWidth + this.gap);
            const y = startY;

            const isInsideQueue = (this.size > 0) && (
                (this.front <= this.rear && i >= this.front && i <= this.rear) ||
                (this.front > this.rear && (i >= this.front || i <= this.rear))
            );

            ctx.fillStyle = isInsideQueue ? "#6c63ff" : "#ccc";
            ctx.strokeStyle = "#000";
            ctx.fillRect(x, y, this.boxWidth, this.boxHeight);
            ctx.strokeRect(x, y, this.boxWidth, this.boxHeight);

            if (this.array[i] !== null) {
                ctx.fillStyle = isInsideQueue ? "#fff" : "#444";
                ctx.fillText(this.array[i], x + this.boxWidth / 2, y + this.boxHeight / 2);
            }

            ctx.fillStyle = "#000";
            ctx.fillText(i.toString(), x + this.boxWidth / 2, y + this.boxHeight + 18);
            ctx.fillText((baseAddress + i*4).toString(), x + this.boxWidth / 2, y - 15);
        }

        // Lu√¥n v·∫Ω con tr·ªè FRONT
        const frontX = startX + this.front * (this.boxWidth + this.gap);
        ctx.fillStyle = "green";
        ctx.fillText("FRONT", frontX + this.boxWidth / 2, startY - 40);

        // Con tr·ªè REAR
        const rearX = this.rear === -1 ? negX : startX + this.rear * (this.boxWidth + this.gap);
        ctx.fillStyle = "red";
        ctx.fillText("REAR", rearX + this.boxWidth / 2, startY + this.boxHeight + 40);
    }
}
