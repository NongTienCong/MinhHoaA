// üìÅ modules/search.js
// Tr√¨nh m√¥ ph·ªèng c√°c thu·∫≠t to√°n t√¨m ki·∫øm
import { ArrayVisualizer } from "./array-visualization.js"; // üëà Import l·ªõp ArrayVisualizer ƒë√£ vi·∫øt

export class SearchSimulator {
    constructor() {
        this.visualizer = null;
        this.size = 0;
    }

    init(values = []) {
         this.size = values.length;

        // üé® Kh·ªüi t·∫°o visualizer v·ªõi s·ªë ph·∫ßn t·ª≠
        this.visualizer = new ArrayVisualizer('simulation-canvas', this.size);

        // üì¶ C·∫≠p nh·∫≠t to√†n b·ªô m·∫£ng b·∫±ng 1 l·ªánh
        this.visualizer.setArray(values);
    }

    // T√¨m ki·∫øm tuy·∫øn t√≠nh (Linear Search)
    async linearSearch(value) {
        const v = this.visualizer;
        v.resetControlFlags();
        v.clearAllPointers();
        v.setColorRange(0, this.size-1, "Blue");
        v.clear();
        v.drawArray();
        const n = v.size;
        let i = 0;
        while (i < n && v.boxes[i].value != value) {
            // Highlight √¥ ƒëang x√©t
            v.addPointer(i, "I");
            v.clear();
            v.setMessage([`üîç T√¨m ki·∫øm ${value} t·∫°i v·ªã tr√≠ ${i}`]);
            v.drawArray();
            v.highlightBox(i, "SandyBrown");
            await v.sleep(500);
            v.highlightBox(i, "Blue");
            await v.sleep(500);
            v.removePointer(i, "I");
            i++;
        }
        if (i < n) {
            // N·∫øu t√¨m th·∫•y, nh·∫•p nh√°y √¥ ƒë√≥ v√† k·∫øt th√∫c
            v.addPointer(i, "I");
            v.highlightBox(i, "SandyBrown");
            v.clear();
            v.setMessage([`üîç T√¨m ki·∫øm ${value} t·∫°i v·ªã tr√≠ ${i}`]);
            v.drawArray();
            await v.blinkBox(i, 3, "Lime", 300);
            v.setMessageLine(1, `‚úÖ ƒê√£ t√¨m th·∫•y ${value} t·∫°i v·ªã tr√≠ ${i}`);
            return i;
        } else {
            // N·∫øu kh√¥ng t√¨m th·∫•y, t√¥ l·∫°i m√†u v√† ti·∫øp t·ª•c
            v.clear();
            v.setMessageLine(1, `‚ùå Kh√¥ng t√¨m th·∫•y ${value} trong m·∫£ng`);
            v.drawArray();
            return -1;
        }
    }

    // T√¨m ki·∫øm nh·ªã ph√¢n (Binary Search) - Ch·ªâ ho·∫°t ƒë·ªông tr√™n m·∫£ng ƒë√£ s·∫Øp x·∫øp
    async binarySearch(target) {
        const v = this.visualizer;
        v.resetControlFlags();
        let low = 0;
        let high = this.size - 1;
        let mid;

        while (low <= high) {
            mid = Math.floor((low + high) / 2);

            // Highlight v√πng t√¨m ki·∫øm
            v.setColorRange(low, high, "LightSeaGreen");
            v.highlightBox(mid, "SandyBrown");
            v.setMessage([
                `üîç T√¨m ki·∫øm ${target} trong ƒëo·∫°n [${low}...${high}]`,
                `üëâ Ki·ªÉm tra A[${mid}] = ${v.boxes[mid].value}`
            ]);
            v.clearAllPointers();
            v.addPointer(low, "Low");
            v.addPointer(mid, "Mid");
            v.addPointer(high, "High");
            v.clear();
            v.drawArray();

            await v.sleep(500);

            if (v.boxes[mid].value === target) {
                // T√¨m th·∫•y
                await v.blinkBox(mid, 3, "Lime", 300);
                v.setMessageLine(1, `‚úÖ ƒê√£ t√¨m th·∫•y ${target} t·∫°i v·ªã tr√≠ ${mid}`);
                return mid;
            } else if (v.boxes[mid].value < target) {
                // Target ·ªü n·ª≠a ph·∫£i. Tr·∫£ l·∫°i m·∫ßu n·ª≠a tr√°i
                v.setColorRange(low, mid, "Blue");
                low = mid + 1;
                v.setMessageLine(1, `‚ùå ${target} > A[${mid}], t√¨m trong n·ª≠a ph·∫£i`);
                await v.sleep(500);

            } else {
                // Target ·ªü n·ª≠a d∆∞·ªõi. Tr·∫£ l·∫°i m·∫ßu n·ª≠a ph·∫£i
                v.setColorRange(mid, high, "Blue");
                high = mid - 1;
                v.setMessageLine(1, `‚ùå ${target} < A[${mid}], t√¨m trong n·ª≠a tr√°i`);
                await v.sleep(500);
            }
        }

        // Kh√¥ng t√¨m th·∫•y
        v.clear();
        v.clearAllPointers();
        v.setMessageLine(1, `‚ùå Kh√¥ng t√¨m th·∫•y ${target} trong m·∫£ng`);
        v.drawArray();
        return -1;
    }
}
