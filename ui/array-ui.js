// üìÅ ui/array-ui.js
// Tr√¨nh c√†i ƒë·∫∑t giao di·ªán m√¥ ph·ªèng c·∫•u tr√∫c m·∫£ng
import { createInput, createButton, createHR, showPseudo } from './render-control.js';

export function setupArrayUI() {
  const control = document.getElementById("control-panel");

  const explainPanel = document.getElementById("explanation-panel");
  let explainContent = document.getElementById("explanation-content");
  let resultContent = document.getElementById("result-content");

  // N·∫øu ph·∫ßn t·ª≠ explanation-content ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
  if (!explainContent) {
    explainContent = document.createElement("div");
    explainContent.id = "explanation-content";
    explainPanel.appendChild(explainContent);
  }

  // N·∫øu ph·∫ßn t·ª≠ result-content ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
  if (!resultContent) {
    resultContent = document.createElement("div");
    resultContent.id = "result-content";
    explainPanel.appendChild(resultContent);
  }

  // Ti√™u ƒë·ªÅ v√πng ƒëi·ªÅu khi·ªÉn
  const controlTitle = document.createElement("h3");
  controlTitle.textContent = "üîß ƒêi·ªÅu khi·ªÉn";
  control.appendChild(controlTitle);

  // Ti√™u ƒë·ªÅ v√πng gi·∫£i th√≠ch (ch·ªâ th√™m n·∫øu ch∆∞a c√≥)
  if (!explainPanel.querySelector("h3")) {
    const explainTitle = document.createElement("h3");
    explainTitle.textContent = "üìù Gi·∫£i th√≠ch";
    explainPanel.insertBefore(explainTitle, explainContent);
  }

  // Th√™m n·ªôi dung v√πng gi·∫£i th√≠ch
  explainContent.innerHTML = `
        <ol>
          <h4>M·∫£ng (Array)</h4>
          <hr>
          <br>
          <li><b>Kh√°i ni·ªám</b>: M·∫£ng l√† c·∫•u tr√∫c d·ªØ li·ªáu tuy·∫øn t√≠nh g·ªìm c√°c ph·∫ßn t·ª≠ c√≥ c√πng ki·ªÉu, ƒë∆∞·ª£c l∆∞u tr·ªØ li√™n ti·∫øp trong b·ªô nh·ªõ.</li>
          <li><b>ƒê·∫∑c ƒëi·ªÉm</b>: 
            <ul>
              <li>Truy c·∫≠p nhanh ph·∫ßn t·ª≠ th√¥ng qua ch·ªâ s·ªë.</li>
              <li>K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh sau khi khai b√°o.</li>
            </ul>
          </li>
          <li><b>C√°c thao t√°c c∆° b·∫£n</b>:
            <ul>
              <li>Kh·ªüi t·∫°o, g√°n gi√° tr·ªã, truy xu·∫•t theo ch·ªâ s·ªë.</li>
              <li>Duy·ªát m·∫£ng, t√¨m ki·∫øm, c·∫≠p nh·∫≠t, s·∫Øp x·∫øp.</li>
            </ul>
          </li>
        </ol>
        <pre id="pseudo-code" style="background:#fef9c3;padding:10px;border:1px solid #ddd;margin-top:10px;"></pre>`

  // Flex container helper
  const createFlexRow = (...elements) => {
    const row = document.createElement("div");
    row.style.display = "flex";
    row.style.alignItems = "center";
    row.style.gap = "8px";
    row.style.margin = "6px 0";
    elements.forEach(el => row.appendChild(el));
    return row;
  };

  // T·∫°o input v√† button
  const sizeInput = createInput("S·ªë ph·∫ßn t·ª≠", "number");
  const initBtn = createButton("Kh·ªüi t·∫°o", () => {
    const size = parseInt(sizeInput.value);
    if (!isNaN(size) && size > 0) {
      showPseudo(`// Init(size)\nKh·ªüi t·∫°o arr[size]`);
      window.arraySim.init(size);
      resultContent.textContent = `‚úÖ ƒê√£ kh·ªüi t·∫°o m·∫£ng ${size} ph·∫ßn t·ª≠.`;
    }
  });

  const indexSet = createInput("Ch·ªâ s·ªë", "number");
  const valueSet = createInput("Gi√° tr·ªã", "text");
  const setBtn = createButton("G√°n (Set)", () => {
    showPseudo(`// Set(value, index)\narr[index] = value`);
    window.arraySim.set(parseInt(indexSet.value), valueSet.value);
    resultContent.textContent = `üîπ G√°n gi√° tr·ªã ${valueSet.value} t·∫°i ch·ªâ s·ªë ${indexSet.value}.`;
  });

  //setBtn.style.width = "240px";

  const indexGet = createInput("Ch·ªâ s·ªë", "number");
  const getBtn = createButton("L·∫•y (Get)", () => {
    showPseudo(`// Get(index)\nreturn arr[index]`);
    const value = window.arraySim.get(parseInt(indexGet.value));
    resultContent.textContent = `üî∏ Gi√° tr·ªã t·∫°i ch·ªâ s·ªë ${indexGet.value} l√†: ${value}`;
  });

  const traverseBtn = createButton("Duy·ªát m·∫£ng", () => {
    showPseudo(`// ArrayTraverse()\nDuy·ªát qua t·ª´ng ph·∫ßn t·ª≠`);
    window.arraySim.traverse();
    resultContent.textContent = `üö∂‚Äç‚ôÇÔ∏è Duy·ªát to√†n b·ªô m·∫£ng.`;
  });

  const clearBtn = createButton("X√≥a (Clear)", () => {
    showPseudo(`// ArrayClear()\nReset all`);
    window.arraySim.clear();
    resultContent.textContent = `üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô gi√° tr·ªã trong m·∫£ng.`;
  });

  // Th√™m t·∫•t c·∫£ v√†o control-panel theo h√†ng ngang
  control.append(
    createFlexRow(sizeInput),
    createFlexRow(initBtn),
    createHR(),
    createFlexRow(indexSet, valueSet),
    createFlexRow(setBtn),
    createHR(),
    createFlexRow(indexGet),
    createFlexRow(getBtn),
    createHR(),
    createFlexRow(traverseBtn, clearBtn)
  );

  // X√≥a v√πng m√¥ ph·ªèng 
  const canvas = document.getElementById("simulation-canvas");
  const ctx = canvas.getContext("2d");
  canvas.width = canvas.clientWidth;
  canvas.height = canvas.clientHeight;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
}
