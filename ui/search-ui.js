// üìÅ ui/search-ui.js
// Tr√¨nh c√†i ƒë·∫∑t giao di·ªán m√¥ ph·ªèng c√°c gi·∫£i thu·∫≠t t√¨m ki·∫øm
import { createInput, createButton, createHR, showPseudo } from './render-control.js';

export function setupSearchUI() {
    const control = document.getElementById("control-panel");
  
    const explainPanel = document.getElementById("explanation-panel");
    let explainContent = document.getElementById("explanation-content");
    let resultContent = document.getElementById("result-content");
  
    // N·∫øu ph·∫ßn t·ª≠ explanation-content ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
    if (!explainContent) {
      explainContent = document.createElement("div");
      explainContent.id = "explanation-content";
      explainPanel.appendChild(explainContent);
    }
  
    // N·∫øu ph·∫ßn t·ª≠ result-content ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
    if (!resultContent) {
      resultContent = document.createElement("div");
      resultContent.id = "result-content";
      explainPanel.appendChild(resultContent);
    }
  
    // Ti√™u ƒë·ªÅ v√πng ƒëi·ªÅu khi·ªÉn
    const controlTitle = document.createElement("h3");
    controlTitle.textContent = "üîß ƒêi·ªÅu khi·ªÉn";
    control.appendChild(controlTitle);
  
    // Ti√™u ƒë·ªÅ v√πng gi·∫£i th√≠ch (ch·ªâ th√™m n·∫øu ch∆∞a c√≥)
    if (!explainPanel.querySelector("h3")) {
      const explainTitle = document.createElement("h3");
      explainTitle.textContent = "üìù Gi·∫£i th√≠ch";
      explainPanel.insertBefore(explainTitle, explainContent);
    }
  
    // Th√™m n·ªôi dung v√πng gi·∫£i th√≠ch
    explainContent.innerHTML = `
    <ol>
      <h4>Gi·∫£i thu·∫≠t t√¨m ki·∫øm (Search algorithm)</h4>
      <hr>
      <br>
      <li><b>Kh√°i ni·ªám</b>: Gi·∫£i thu·∫≠t t√¨m ki·∫øm l√† k·ªπ thu·∫≠t d√πng ƒë·ªÉ t√¨m ki·∫øm ph·∫ßn t·ª≠ (theo gi√° tr·ªã, kh√≥a, ho·∫∑c ƒëi·ªÅu ki·ªán) trong m·ªôt t·∫≠p d·ªØ li·ªáu nh∆∞ m·∫£ng, danh s√°ch, c√¢y, v.v.</li>
      <li><b>Ph√¢n lo·∫°i</b>:
        <ul>
          <li>T√¨m ki·∫øm tu·∫ßn t·ª± (Linear Search).</li>
          <li>T√¨m ki·∫øm nh·ªã ph√¢n (Binary Search).</li>
        </ul>
      </li>
      <li><b>·ª®ng d·ª•ng</b>:
        <ul>
          <li>Ph√¢n t√≠ch d·ªØ li·ªáu, t√¨m ki·∫øm th√¥ng tin.</li>
          <li>T·ªëi ∆∞u h√≥a c√¥ng c·ª• t√¨m ki·∫øm.</li>
          <li>Trong AI, x·ª≠ l√Ω ·∫£nh, m·∫°ng m√°y t√≠nh,v.v.</li>
        </ul>
      </li>
    </ol>
    <pre id="pseudo-code" style="background:#fef9c3;padding:10px;border:1px solid #ddd;margin-top:10px;"></pre>`


    // Flex container helper
    const createFlexRow = (...elements) => {
      const row = document.createElement("div");
      row.style.display = "flex";
      row.style.alignItems = "center";
      row.style.gap = "8px";
      row.style.margin = "6px 0";
      elements.forEach(el => row.appendChild(el));
      return row;
    };
  
    // Input kh·ªüi t·∫°o danh s√°ch
    const initInput = createInput("Danh s√°ch: 1, 2, 3,...", "text");
    //initInput.style.width = "100px";

    // N√∫t kh·ªüi t·∫°o danh s√°ch
    const initBtn = createButton("T·∫°o danh s√°ch kh√≥a", () => {
      showPseudo(`// Init(val[])\nT·∫°o danh s√°ch kh√≥a t·ª´ d√£y ƒë·∫ßu v√†o`);
  
      // üîß X·ª≠ l√Ω chu·ªói ƒë·∫ßu v√†o th√†nh m·∫£ng s·ªë
      const values = initInput.value
        .split(/[\s,]+/)
        .map(val => Number(val))
        .filter(val => !isNaN(val));

      if (values.length === 0) {
        resultContent.textContent = `‚ö†Ô∏è Danh s√°ch kh√≥a kh√¥ng h·ª£p l·ªá!`;
        return;
      }

      window.searchSim.init(values);
      resultContent.textContent = `üöÄ Danh s√°ch kh√≥a ƒë∆∞·ª£c t·∫°o l√†: [${values.join(", ")}]`;
    });
    initBtn.style.width = "200px";

    // Input gi√° tr·ªã c·∫ßn t√¨m
    const valueInput = createInput("Gi√° tr·ªã c·∫ßn t√¨m", "text");
    //valueInput.style.width = "200px";

    // N√∫t t√¨m ki·∫øm tuy·∫øn t√≠nh
    const linearSearchBtn = createButton("T√¨m ki·∫øm tu·∫ßn t·ª±", () => {
      showPseudo(`// LinearSearch(a[], x)\ni = 0\nwhile(i < size(a[]) && a[i] != x)\n  i++\nif(i < size(a[]))\n  return i\nelse\n  return -1`);

      const value = Number(valueInput.value);
      if (isNaN(value)) {
        resultContent.textContent = `‚ö†Ô∏è Gi√° tr·ªã t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá!`;
        return;
      }

      window.searchSim.linearSearch(value).then((index) => {
        resultContent.textContent = index !== null
          ? `üîç T√¨m th·∫•y "${value}" t·∫°i v·ªã tr√≠ "${index}".`
          : `üîç Kh√¥ng t√¨m th·∫•y "${value}" trong m·∫£ng.`;
      });
    });
    linearSearchBtn.style.width = "200px";

    // N√∫t t√¨m ki·∫øm nh·ªã ph√¢n
    const binarySearchBtn = createButton("T√¨m ki·∫øm nh·ªã ph√¢n", () => {
      showPseudo(`// BinarySearch(a[], x)\nleft = 0, right = size-1\nwhile(left <= right)\n  mid = (left+right)/2\n  if(a[mid] == x)\n    return mid\n  else if(x > a[mid])\n    left = mid+1\n  else\n    right = mid-1\nreturn -1`);

      const value = Number(valueInput.value);
      if (isNaN(value)) {
        resultContent.textContent = `‚ö†Ô∏è Gi√° tr·ªã t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá!`;
        return;
      }

      window.searchSim.binarySearch(value).then((index) => {
        resultContent.textContent = index !== null
          ? `üîç T√¨m th·∫•y "${value}" t·∫°i v·ªã tr√≠ "${index}".`
          : `üîç Kh√¥ng t√¨m th·∫•y "${value}" trong m·∫£ng.`;
      });
    });
    binarySearchBtn.style.width = "200px";

    // Th√™m t·∫•t c·∫£ v√†o control-panel theo h√†ng ngang
    control.append(
      createFlexRow(initInput),
      createFlexRow(initBtn),
      createHR(),
      createFlexRow(valueInput),
      createHR(),
      createFlexRow(linearSearchBtn),
      createFlexRow(binarySearchBtn),
    );
  
    // X√≥a v√πng m√¥ ph·ªèng 
    const canvas = document.getElementById("simulation-canvas");
    const ctx = canvas.getContext("2d");
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  }
