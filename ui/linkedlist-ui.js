// üìÅ ui/linkedlist-ui.js
// Tr√¨nh c√†i ƒë·∫∑t giao di·ªán m√¥ ph·ªèng c·∫•u tr√∫c danh s√°ch
import { createInput, createButton, createHR, showPseudo } from './render-control.js';

export function setupLinkedListUI() {
  const control = document.getElementById("control-panel");
  control.innerHTML = ""; // X√≥a n·ªôi dung c≈© n·∫øu c√≥

  const explainPanel = document.getElementById("explanation-panel");
  let explainContent = document.getElementById("explanation-content");
  let resultContent = document.getElementById("result-content");

  // N·∫øu ph·∫ßn t·ª≠ explanation-content ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
  if (!explainContent) {
    explainContent = document.createElement("div");
    explainContent.id = "explanation-content";
    explainPanel.appendChild(explainContent);
  }

  // N·∫øu ph·∫ßn t·ª≠ result-content ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
  if (!resultContent) {
    resultContent = document.createElement("div");
    resultContent.id = "result-content";
    explainPanel.appendChild(resultContent);
  }

  // Ti√™u ƒë·ªÅ v√πng ƒëi·ªÅu khi·ªÉn
  const controlTitle = document.createElement("h3");
  controlTitle.textContent = "üîß ƒêi·ªÅu khi·ªÉn";
  control.appendChild(controlTitle);

  // Ti√™u ƒë·ªÅ v√πng gi·∫£i th√≠ch (ch·ªâ th√™m n·∫øu ch∆∞a c√≥)
  if (!explainPanel.querySelector("h3")) {
    const explainTitle = document.createElement("h3");
    explainTitle.textContent = "üìù Gi·∫£i th√≠ch";
    explainPanel.insertBefore(explainTitle, explainContent);
  }

  // Th√™m n·ªôi dung v√πng gi·∫£i th√≠ch
  explainContent.innerHTML = `
    <ol>
      <h4>Danh s√°ch li√™n k·∫øt ƒë∆°n (Singly linked list)</h4>
      <hr>
      <br>
      <li><b>Kh√°i ni·ªám</b>: L√† t·∫≠p h·ª£p c√°c n√∫t (node), m·ªói n√∫t c√≥ th√†nh ph·∫ßn ch·ª©a d·ªØ li·ªáu v√† th√†nh ph·∫ßn con tr·ªè ch·ªâ ƒë·∫øn n√∫t k·∫ø ti·∫øp.</li>
      <li><b>ƒê·∫∑c ƒëi·ªÉm</b>:
        <ul>
          <li>K√≠ch th∆∞·ªõc linh ho·∫°t, d·ªÖ ch√®n/x√≥a ph·∫ßn t·ª≠.</li>
          <li>Truy c·∫≠p tu·∫ßn t·ª± (O(n)).</li>
        </ul>
      </li>
      <li><b>C√°c thao t√°c c∆° b·∫£n</b>:</li>
        <ul>
          <li>Th√™m/X√≥a ·ªü ƒë·∫ßu/cu·ªëi/v·ªã tr√≠ b·∫•t k·ª≥.</li>
          <li>Duy·ªát danh s√°ch, t√¨m ki·∫øm theo gi√° tr·ªã ho·∫∑c v·ªã tr√≠.</li>
        </ul>
    </ol>
    <pre id="pseudo-code" style="background:#fef9c3;padding:10px;border:1px solid #ddd;margin-top:10px;"></pre>`

  const createFlexRow = (...elements) => {
    const row = document.createElement("div");
    row.style.display = "flex";
    row.style.alignItems = "center";
    row.style.gap = "8px";
    row.style.margin = "6px 0";
    elements.forEach(el => row.appendChild(el));
    return row;
  };

  const initInput = createInput("Danh s√°ch: A, B, C,..", "text");
  //initInput.style.width = "240px";
  
  const initBtn = createButton("Kh·ªüi t·∫°o danh s√°ch", () => {
    showPseudo(`// Init(val[])\nN·∫øu(val[] == null)\n HEAD = null\nNg∆∞·ª£c l·∫°i\n L·∫∑p v·ªõi m·ªói i (i = 1, 2,..)\n   AddFirst(val[i])`);
    const values = initInput.value.split(",").map(s => s.trim()).filter(s => s !== "");
    window.linkedListSim.init(values);
    resultContent.textContent = `üöÄ Danh s√°ch ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi: [${values.join(", ")}]`;
  });

  // console.log("initBtn l√†:", initBtn);
  // initBtn.style.setProperty("width", "240px", "important");
  initBtn.style.width = "240px";

  // Input
  const valueInput = createInput("Gi√° tr·ªã", "text");
  const indexInput = createInput("V·ªã tr√≠", "number");

  // Buttons
  const addFirstBtn = createButton("Th√™m ƒë·∫ßu", () => {
    showPseudo(`// AddFirst(value)\n- Th√™m value v√†o ƒë·∫ßu DS\n- HEAD tr·ªè v√†o n√∫t ƒë·∫ßu`);
    window.linkedListSim.insertAtHead(valueInput.value);
    resultContent.textContent = `üîº ƒê√£ th√™m "${valueInput.value}" v√†o ƒë·∫ßu danh s√°ch.`;
  });

  //addFirstBtn.style.width = "100px";

  const addLastBtn = createButton("Th√™m cu·ªëi", () => {
    showPseudo(`// AddLast(value)\n- T√¨m ƒë·∫øn n√∫t cu·ªëi DS\n- Th√™m value v√†o cu·ªëi DS`);
    window.linkedListSim.insertAtTail(valueInput.value);
    resultContent.textContent = `üîΩ ƒê√£ th√™m "${valueInput.value}" v√†o cu·ªëi danh s√°ch.`;
  });

  //addLastBtn.style.width = "100px";

  const addAtBtn = createButton("Th√™m t·∫°i v·ªã tr√≠", () => {
    showPseudo(`// AddAt(value, index)\n- T√¨m ƒë·∫øn v·ªã tr√≠ index\n- N·∫øu t√¨m th·∫•y\n    Ch√®n value v√†o DS\n    return 1\n  Ng∆∞·ª£c l·∫°i\n    return -1`);
    window.linkedListSim.insertAt(parseInt(indexInput.value), valueInput.value)
      .then(success => {
        if (success) {
          // ‚úÖ Th√™m th√†nh c√¥ng
          resultContent.textContent = `‚úÖ ƒê√£ th√™m "${valueInput.value}" t·∫°i v·ªã tr√≠ ${indexInput.value}.`;
        } else {
          // ‚ùå V·ªã tr√≠ kh√¥ng h·ª£p l·ªá (l·ªõn h∆°n chi·ªÅu d√†i danh s√°ch)
          resultContent.textContent = `‚ùå Kh√¥ng th·ªÉ th√™m v√†o v·ªã tr√≠ ${indexInput.value} ‚Äì v·ªã tr√≠ kh√¥ng h·ª£p l·ªá.`;
        }
      });
  });

  //addAtBtn.style.width = "240px";

  const removeAtBtn = createButton("X√≥a t·∫°i v·ªã tr√≠", () => {
    showPseudo(`// RemoveAt(index)\n- T√¨m ƒë·∫øn v·ªã tr√≠ index\n- N·∫øu t√¨m th·∫•y\n    X√≥a ph·∫ßn t·ª≠\n    return 1\n  Ng∆∞·ª£c l·∫°i\n    return -1`);
    const index = parseInt(indexInput.value);
    window.linkedListSim.removeAt(index).then(success => {
      if (success) {
        resultContent.textContent = `üóëÔ∏è ƒê√£ x√≥a ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ ${index}.`;
      } else {
        resultContent.textContent = `‚ùå Kh√¥ng th·ªÉ x√≥a ‚Äì danh s√°ch r·ªóng ho·∫∑c v·ªã tr√≠ ${index} kh√¥ng h·ª£p l·ªá.`;
      }
    });
  });

  //removeAtBtn.style.width = "240px";

  const findValueBtn = createButton("T√¨m theo gi√° tr·ªã", () => {
    showPseudo(`// SearchValue(value)\nT√¨m t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi DS\n  N·∫øu t√¨m th·∫•y\n    return index\n  Ng∆∞·ª£c l·∫°i\n    return -1`);
    window.linkedListSim.findByValue(valueInput.value).then((post) => {
      resultContent.textContent = post !== null
        ? `üîç T√¨m th·∫•y "${valueInput.value}" t·∫°i v·ªã tr√≠ "${post}".`
        : `üîç Danh s√°ch kh√¥ng c√≥ "${valueInput.value}".`;
    });
  });

  //findValueBtn.style.width = "240px";
  
  const traverseBtn = createButton("Duy·ªát danh s√°ch", () => {
    showPseudo(`// TraverseLinkedList()\nDuy·ªát qua t·ª´ng ph·∫ßn t·ª≠`);
    window.linkedListSim.traverse();
    resultContent.textContent = `üö∂‚Äç‚ôÇÔ∏è Duy·ªát to√†n b·ªô danh s√°ch.`;
  });

  //traverseBtn.style.width = "240px";

  const clearBtn = createButton("X√≥a danh s√°ch (Remove All)", () => {
    showPseudo(`// RemoveAll()\nL·∫∑p(HEAD != null)\n  RemoveAt(0)`);
    window.linkedListSim.clear();
    resultContent.textContent = `üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô danh s√°ch.`;
  });

  //clearBtn.style.width = "240px";

  control.append(
    createFlexRow(initInput),
    createFlexRow(initBtn),
    createHR(),
    createFlexRow(valueInput, indexInput),
    createFlexRow(addFirstBtn, addLastBtn, addAtBtn),
    createFlexRow(addAtBtn),
    createHR(),
    createFlexRow(findValueBtn),
    createFlexRow(traverseBtn),
    createHR(),
    createFlexRow(removeAtBtn),
    createFlexRow(clearBtn)
  );

  // X√≥a v√πng m√¥ ph·ªèng 
  const canvas = document.getElementById("simulation-canvas");
  const ctx = canvas.getContext("2d");
  canvas.width = canvas.clientWidth;
  canvas.height = canvas.clientHeight;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
}
