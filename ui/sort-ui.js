// üìÅ ui/sort-ui.js
// Tr√¨nh c√†i ƒë·∫∑t giao di·ªán m√¥ ph·ªèng c√°c gi·∫£i thu·∫≠t t√¨m ki·∫øm
import { createInput, createButton, createHR, showPseudo, showFileTxt } from './render-control.js';

export function setupSortUI() {
    const control = document.getElementById("control-panel");
  
    const explainPanel = document.getElementById("explanation-panel");
    let explainContent = document.getElementById("explanation-content");
    let resultContent = document.getElementById("result-content");
  
    // N·∫øu ph·∫ßn t·ª≠ explanation-content ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
    if (!explainContent) {
      explainContent = document.createElement("div");
      explainContent.id = "explanation-content";
      explainPanel.appendChild(explainContent);
    }
  
    // N·∫øu ph·∫ßn t·ª≠ result-content ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
    if (!resultContent) {
      resultContent = document.createElement("div");
      resultContent.id = "result-content";
      explainPanel.appendChild(resultContent);
    }
  
    // Ti√™u ƒë·ªÅ v√πng ƒëi·ªÅu khi·ªÉn
    const controlTitle = document.createElement("h3");
    controlTitle.textContent = "üîß ƒêi·ªÅu khi·ªÉn";
    control.appendChild(controlTitle);
  
    // Ti√™u ƒë·ªÅ v√πng gi·∫£i th√≠ch (ch·ªâ th√™m n·∫øu ch∆∞a c√≥)
    if (!explainPanel.querySelector("h3")) {
      const explainTitle = document.createElement("h3");
      explainTitle.textContent = "üìù Gi·∫£i th√≠ch";
      explainPanel.insertBefore(explainTitle, explainContent);
    }
  
    // Th√™m n·ªôi dung v√πng gi·∫£i th√≠ch
    explainContent.innerHTML = `
    <ol>
      <h4>Gi·∫£i thu·∫≠t s·∫Øp x·∫øp (Sorting algorithm)</h4>
      <hr>
      <br>
      <li><b>Kh√°i ni·ªám</b>: S·∫Øp x·∫øp l√† qu√° tr√¨nh t·ªï ch·ª©c l·∫°i c√°c ph·∫ßn t·ª≠ trong m·ªôt t·∫≠p d·ªØ li·ªáu theo th·ª© t·ª± tƒÉng d·∫ßn ho·∫∑c gi·∫£m d·∫ßn d·ª±a tr√™n m·ªôt ti√™u ch√≠ n√†o ƒë√≥.</li>
      <li><b>Ph√¢n lo·∫°i</b>:
        <ul>
          <li>S·∫Øp x·∫øp ƒë∆°n gi·∫£n (Simple Sort).</li>
          <li>S·∫Øp x·∫øp hi·ªáu qu·∫£ (Efficient Sort).</li>
          <li>S·∫Øp x·∫øp theo ƒë·∫∑c th√π (Sort by characteristics).</li>
        </ul>
      </li>
      <li><b>·ª®ng d·ª•ng</b>:
        <ul>
          <li>Qu·∫£n l√Ω c∆° s·ªü d·ªØ li·ªáu, ph√¢n t√≠ch d·ªØ li·ªáu.</li>
          <li>L√† b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω cho c√°c thu·∫≠t to√°n kh√°c.</li>
          <li>Trong AI, x·ª≠ l√Ω ·∫£nh, m·∫°ng m√°y t√≠nh,v.v.</li>
        </ul>
      </li>
    </ol>
    <pre id="pseudo-code" style="background:#fef9c3;padding:10px;border:1px solid #ddd;margin-top:10px;"></pre>`


    // Flex container helper
    const createFlexRow = (...elements) => {
      const row = document.createElement("div");
      row.style.display = "flex";
      row.style.alignItems = "center";
      row.style.gap = "8px";
      row.style.margin = "6px 0";
      elements.forEach(el => row.appendChild(el));
      return row;
    };
  
    // Input kh·ªüi t·∫°o danh s√°ch
    const initInput = createInput("Danh s√°ch: 1, 2, 3,...", "text");
    
    // N√∫t kh·ªüi t·∫°o danh s√°ch
    const initBtn = createButton("T·∫°o danh s√°ch kh√≥a", () => {
      showPseudo(`// Init(val[])\nT·∫°o danh s√°ch kh√≥a t·ª´ d√£y ƒë·∫ßu v√†o`);
  
      // üîß X·ª≠ l√Ω chu·ªói ƒë·∫ßu v√†o th√†nh m·∫£ng s·ªë
      const values = initInput.value
        .split(/[\s,]+/)
        .map(val => Number(val))
        .filter(val => !isNaN(val));

      if (values.length === 0) {
        resultContent.textContent = `‚ö†Ô∏è Danh s√°ch kh√≥a kh√¥ng h·ª£p l·ªá!`;
        return;
      }

      window.sortSim.init(values);
      resultContent.textContent = `üöÄ Danh s√°ch kh√≥a ƒë∆∞·ª£c t·∫°o l√†: [${values.join(", ")}]`;
    });
    initBtn.style.width = "200px";

    // N√∫t t·∫°o d√£y ng·∫´u nhi√™n
    const generateRandomBtn = createButton("T·∫°o d√£y ng·∫´u nhi√™n", () => {
      showPseudo(`// Init(val[])\nT·∫°o d√£y s·ªë ng·∫´u nhi√™n g·ªìm 8 ph·∫ßn t·ª≠`);

      // üîß T·∫°o d√£y 8 s·ªë t·ª± nhi√™n ng·∫´u nhi√™n t·ª´ 1 ƒë·∫øn 99
      const randomValues = Array.from({ length: 8 }, () =>
        Math.floor(Math.random() * 99) + 1
      );

      // ‚úçÔ∏è Hi·ªÉn th·ªã d√£y v√†o √¥ nh·∫≠p, kh√¥ng g·ªçi init
      initInput.value = randomValues.join(", ");

      // üì¢ Hi·ªÉn th·ªã th√¥ng b√°o
      resultContent.textContent = `üé≤ D√£y ng·∫´u nhi√™n ƒë∆∞·ª£c t·∫°o: [${randomValues.join(", ")}]`;
    });
    generateRandomBtn.style.width = "200px";

    // N√∫t s·∫Øp x·∫øp n·ªïi b·ªçt
    const bubbleSortBtn = createButton("S·∫Øp x·∫øp n·ªïi b·ªçt", () => {
        showPseudo(`// BubbleSort(a[])\nfor(i = 0; i < size(a[]); i++)\n  for(j = size(a[])-1; j > 0; i--)\n    if(a[j] < a[j-1])\n      swap(a[j], a[j-1])`);
        window.sortSim.bubbleSort().then(() => {
          resultContent.textContent = "üöÄ D√£y s·ªë ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp!";
        });
      });
    bubbleSortBtn.style.width = "200px";

    // N√∫t s·∫Øp x·∫øp ch·ªçn tr·ª±c ti·∫øp
    const selectionSortBtn = createButton("S·∫Øp x·∫øp ki·ªÉu ch·ªçn", () => {
      showPseudo(`// SelectionSort(a[])\nfor(i = 0; i < size(a[]); i++)\n  Min = i\n  for(j = i+1; j < size(a[]); j++)\n    if(a[j] < a[Min])\n      Min = j\n  if(i != Min)\n    swap(a[i], a[Min])`);
      window.sortSim.selectionSort().then(() => {
        resultContent.textContent = "üöÄ D√£y s·ªë ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp!";
      });
    });
    selectionSortBtn.style.width = "200px";

    // N√∫t s·∫Øp x·∫øp ch√®n tr·ª±c ti·∫øp
    const insertionSortBtn = createButton("S·∫Øp x·∫øp ki·ªÉu ch√®n", () => {
      showPseudo(`// InsertionSort(a[])\nfor(i = 1; i < size(a[]); i++)\n  j = i\n  while(j > 0 && a[j] < a[j-1])\n    sawp(a[j], a[j-1]\n    j--`);
      window.sortSim.insertionSort().then(() => {
        resultContent.textContent = "üöÄ D√£y s·ªë ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp!";
      });
    });
    insertionSortBtn.style.width = "200px";

    // N√∫t s·∫Øp x·∫øp nhanh
    const quickSortBtn = createButton("S·∫Øp x·∫øp nhanh", () => {
      showFileTxt("../modules/quickSort.txt");
      window.sortSim.quickSort().then(() => {
        resultContent.textContent = "üöÄ D√£y s·ªë ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp!";
      });
    });
    quickSortBtn.style.width = "200px";

    // N√∫t s·∫Øp x·∫øp tr·ªôn
    const megerSortBtn = createButton("S·∫Øp x·∫øp tr·ªôn", () => {
      showFileTxt("../modules/mergeSort.txt");
      window.sortSim.mergeSort().then(() => {
        resultContent.textContent = "üöÄ D√£y s·ªë ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp!";
      });
    });
    megerSortBtn.style.width = "200px";

    // Th√™m t·∫•t c·∫£ v√†o control-panel theo h√†ng ngang
    control.append(
      createFlexRow(initInput),
      createFlexRow(generateRandomBtn),
      createFlexRow(initBtn),
      createHR(),
      createFlexRow(bubbleSortBtn),
      createFlexRow(selectionSortBtn),
      createFlexRow(insertionSortBtn),
      createFlexRow(quickSortBtn),
      createFlexRow(megerSortBtn),
    );

    //================================================================
        // ====== ƒêi·ªÅu khi·ªÉn thu·∫≠t to√°n (T·∫°m d·ª´ng, Ti·∫øp t·ª•c, T·ªëc ƒë·ªô) ======

        const pauseBtn = createButton("‚è∏Ô∏è", () => {
          if (window.sortSim?.visualizer) {
            window.sortSim.visualizer.pause();
          }
        });
    
        const resumeBtn = createButton("‚ñ∂Ô∏è", () => {
          if (window.sortSim?.visualizer) {
            window.sortSim.visualizer.resume();
          }
        });
    
        const stopBtn = createButton("‚èπÔ∏è", () => {
          if (window.sortSim?.visualizer) {
            window.sortSim.visualizer.stop();
          }
        });
    
        // T·ªëc ƒë·ªô th·ª±c thi
        const speedSelect = document.createElement("select");
        ["0.5", "1", "1.5", "2"].forEach(speed => {
          const option = document.createElement("option");
          option.value = speed;
          option.textContent = `${speed}√ó`;
          if (speed === "1") option.selected = true;
          speedSelect.appendChild(option);
        });
    
        speedSelect.onchange = () => {
          if (window.sortSim?.visualizer) {
            window.sortSim.visualizer.setSpeedFactor(parseFloat(speedSelect.value));
          }
        };
    
        const speedLabel = document.createElement("label");
        speedLabel.textContent = "‚ö° T·ªëc ƒë·ªô:";
        speedLabel.style.marginRight = "6px";
        const speedRow = createFlexRow(speedLabel, speedSelect);
    
        // Th√™m c√°c n√∫t v√†o control panel
        control.append(
          createHR(),
          createFlexRow(pauseBtn, resumeBtn, stopBtn),
          speedRow
        );
    //===============================================================
  
    // X√≥a v√πng m√¥ ph·ªèng 
    const canvas = document.getElementById("simulation-canvas");
    const ctx = canvas.getContext("2d");
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  }
